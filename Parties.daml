daml 1.2

module Parties where

data Cash = Cash with
  currency : Text
  amount : Decimal
    deriving (Eq, Show)

template Iou
  with
    issuer : Party
    owner : Party
    cash : Cash
  where
    signatory issuer, owner

    controller owner can
      Transfer
        : ContractId Iou
        with
          newOwner : Party
        do
          assertMsg "newOwner cannot be current owner" (owner /= newOwner)
          create this with owner = newOwner

      -- Let the owner of the iou propose a transfer
      -- I think we do from within Iou because otherwise the transfer proposal
      -- won't have the authorization to archive this Iou and create a new one
      -- when the Iou is transferred to newOwner
      ProposeTransfer
        : ContractId IouTransferProposal
        with
          newOwner : Party
        do
          assertMsg "newOwner cannot be current owner" (owner /= newOwner)
          create IouTransferProposal with
            iou = this
            newOwner

    choice Mutual_Transfer
      : ContractId Iou
      with
        newOwner : Party
      controller owner, newOwner
      do
        create this with
          owner = newOwner

template IouProposal
  with
    iou : Iou
  where
    signatory iou.issuer

    controller iou.owner can
      IouProposal_Accept
        : ContractId Iou
        do
          create iou

template IouTransferProposal
  with
    iou : Iou
    newOwner : Party
  where
    signatory (signatory iou) -- Gets the signatories of iou and provides them to this template

    controller iou.owner can
      -- Cancel by creating the iou with its existing properties
      -- Prevents abuse by recipient
      IouTransferProposal_Cancel
        : ContractId Iou
        do
          create iou

    controller newOwner can
      -- Reject in the same way as IouTransferProposal_Cancel
      IouTransferProposal_Reject
        : ContractId Iou
        do
          create iou

      -- Accept by replacing previous Iou with new owner
      IouTransferProposal_Accept
        : ContractId Iou
        do
          create iou with
            owner = newOwner

template IouSender
  with
    sender : Party
    receiver : Party
  where
    signatory receiver
  
    controller sender can
      -- Keeps this contract from being consumed so it can be reused
      nonconsuming Send_Iou
        : ContractId Iou
        with
          iouCid : ContractId Iou
        do
          iou <- fetch iouCid
          assertMsg "Cash value must be greater than 0" (iou.cash.amount > 0.0)
          assertMsg "Sender does not own the Iou being sent" (sender == iou.owner)
          -- iou is still consumed and replaced with a new contract when the owner changes
          exercise iouCid Mutual_Transfer with
            newOwner = receiver

iou_test = scenario do
  alice <- getParty "Alice"
  bob <- getParty "Bob"
  charlie <- getParty "Charlie"

  -- Alice and Bob want to trade, but Alice can't give Bob an Iou without his authority
  submitMustFail alice do
    create Iou with
      issuer = alice
      owner = bob
      cash = Cash with
        amount = 100.0
        currency = "USD"

  -- She can give herself an Iou
  iou <- submit alice do
    create Iou with
      issuer = alice
      owner = alice
      cash = Cash with
        amount = 100.0
        currency = "USD"

  -- But she can't send it to Bob because she needs his authorization
  submitMustFail alice do
    exercise iou Transfer with
      newOwner = bob
  
  -- Alice creates an Iou proposal to send to Bob
  iouProposal <- submit alice do
    create IouProposal with
      iou = Iou with
        issuer = alice
        owner = bob
        cash = Cash with
          amount = 200.0
          currency = "USD"
  
  -- Bob accepts the transfer
  submit bob do
    exercise iouProposal IouProposal_Accept

  -- Alice makes an Iou to herself with a transfer proposal to Bob
  tpab <- submit alice do
    create IouTransferProposal with
      newOwner = bob
      iou = Iou with
        issuer = alice
        owner = alice
        cash = Cash with
          amount = 300.0
          currency = "USD"
  
  -- Bob accepts the Iou transfer
  iou2 <- submit bob do
    exercise tpab IouTransferProposal_Accept

  -- Bob offers a transfer to Charlie
  tpabc <- submit bob do
    exercise iou2 ProposeTransfer with newOwner = charlie

  -- Charlie accepts from Bob
  submit charlie do
    exercise tpabc IouTransferProposal_Accept

iou_sender = scenario do
  alice <- getParty "Alice"
  bob <- getParty "Bob"

  -- Alice creates the Iou
  iou <- submit alice do
    create Iou with
      issuer = alice
      owner = alice
      cash = Cash with
        currency = "USD"
        amount = 500.0

  -- Bob permits Alice to send him Ious
  sab <- submit bob do
    create IouSender with
      sender = alice
      receiver = bob
  
  -- Alice sends the Iou to Bob, which Bob now owns
  submit alice do
    exercise sab Send_Iou with
      iouCid = iou


    