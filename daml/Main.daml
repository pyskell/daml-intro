daml 1.2

module Main (
  module Main
  ) where
import DA.List
import Prelude hiding (Action)

template AuthorizationPlaceholder
  with
    provider : Party
    signers : [Party]
    minimum : Int
  where
    signatory provider
    observer signers
    ensure
      unique (signers ++ [provider]) -- A provider cannot be a signer

template PendingAuthorization
  with
    provider : Party
    authorization : AuthorizationPlaceholder
    signedBy : [Party]
    rejectedBy : [Party]
  where
    signatory signedBy ++ rejectedBy ++ [authorization.provider]
    observer authorization.signers
    ensure unique $ signedBy ++ rejectedBy

    let remaining = authorization.signers \\ (signedBy ++ rejectedBy)

    choice Authorization_Sign : ContractId PendingAuthorization with
        signer : Party

      controller signer
        do
          assert $ elem signer remaining
          create this with
            signedBy = signer :: signedBy
    
    choice Authorization_Reject : ContractId PendingAuthorization with
        signer : Party
      
      controller signer
        do
          assert $ elem signer remaining
          -- If a party rejects the contract they remove themselves from the signers
          let signers = delete signer authorization.signers
          let auth = authorization with signers

          create this with
            rejectedBy = signer :: rejectedBy
            authorization = auth
    
    choice Authorization_Complete : ContractId AuthorizationPlaceholder 
      controller provider
        do
          assertMsg "Not enough approvals" (length signedBy >= authorization.minimum)
          create authorization

  -- Alice wants to modify the DNS records of a very critical 
  -- domain name controlled by her DNS Provider
  -- This change requires the approval of at least 3 of 4 participants
  -- within her organization.
  -- To do this the Provider creates a PendingAuthorization which contains the AuthorizationPlaceholder and waits for the signers to approve it

  -- The provider has previously negotiated the PendingAuthorization with Alices team
test_auth = scenario do

  parties@[alice, bob, carol, dave] <- mapA getParty ["Alice", "Bob", "Carol", "Dave"]
  provider <- getParty "Provider"

  let auth = AuthorizationPlaceholder with signers = parties, minimum = 3, provider

  -- Providers cannot create a contract where some have already signed/rejected
  submitMustFail provider do
    create PendingAuthorization with
      provider
      authorization = auth
      signedBy = [alice, bob, carol]
      rejectedBy = [dave]

  -- Alice cannot both sign and reject a contract
  submitMustFail alice do
    create PendingAuthorization with
      provider
      authorization = auth
      signedBy = [alice]
      rejectedBy = [alice]

  -- Provider creates the contract
  pendingAuth <- submit provider do
    create PendingAuthorization with
      provider
      authorization = auth
      signedBy = []
      rejectedBy = []

  -- Alice cannot replace the provider with her own and pass off a fake AuthorizationPlaceholder
  fakeProvider <- getParty "FakeProvider"
  let badAuth = AuthorizationPlaceholder with signers = [alice], minimum = 1, provider = fakeProvider

  -- FakeProviders cannot masquerade as the real entity
  badAuth <- submit fakeProvider do
    create PendingAuthorization with
      provider = fakeProvider
      authorization = badAuth
      signedBy = []
      rejectedBy = []

  completedAuth <- submit alice do
    exercise badAuth Authorization_Sign with signer = alice

  submitMustFail provider do
    exercise completedAuth Authorization_Complete

  pendingAuth <- submit alice do
    exercise pendingAuth Authorization_Sign with signer = alice
  
  pendingAuth <- submit bob do
    exercise pendingAuth Authorization_Sign with signer = bob
  
  -- Bob cannot sign for someone else
  submitMustFail bob do
    exercise pendingAuth Authorization_Sign with signer = carol
  
  -- Provider cannot complete a contract that does not >= minimum signatures
  submitMustFail provider do
    exercise pendingAuth Authorization_Complete

  -- Carol can reject the authorization
  pendingAuth <- submit carol do
    exercise pendingAuth Authorization_Reject with signer = carol

  -- But she cannot sign later
  submitMustFail carol do
    exercise pendingAuth Authorization_Sign with signer = carol
  
  pendingAuth <- submit dave do
    exercise pendingAuth Authorization_Sign with signer = dave

  -- With enough signers the Provider can complete the authorization
  submit provider do
    exercise pendingAuth Authorization_Complete