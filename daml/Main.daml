daml 1.2

module Main where
import DA.Next.Map as M

-- -- data BasePermissions = Function
-- --   deriving(Eq, Show)


-- -- data BasePermissions a = BasePermissions (a -> Bool)

-- -- data BasePermissions = BasePermissions{
-- --     authorization : Bool
-- -- } deriving (Eq, Show)

-- type BasePermissions = Bool

-- template Permissions
--   with
--     owner : Party
--     permissions : BasePermissions
--   where
--     signatory owner
  
--     controller owner can
--       SetPermissions : ContractId Permissions
--         with
--           newPermissions : BasePermissions
--         do
--           create this with permissions = newPermissions

template Authorization
  with
    owner : Party
    -- approved : Map Party Bool
    approved : Bool
  where
    signatory owner
    
    controller owner can
      Send_Authorization
        : ContractId Authorization
          -- with approvers : [(Party, Bool)]
        do
          -- let approvers = M.fromListWith (&& False) approvers
          assertMsg "Authorization requests must be false" (approved /= True)
          create this

template AuthorizationProposal
  with
    sender : Party
    receiver : Party
    authorization : Authorization
  where
    signatory (signatory authorization)

    controller receiver can
      UserAuthorization_Accept
        : ContractId Authorization
        do
          assertMsg "sender and receiver cannot be the same party" (sender /= receiver)
          create authorization with
            approved = True
    
    controller receiver can
      UserAuthorization_Reject
        : ContractId Authorization
        do
          create authorization

    controller authorization.owner can
      UserAuthorization_Cancel
        : ContractId Authorization
        do
          create authorization

test_auth = scenario do
  alice <- getParty "Alice"
  bob <- getParty "Bob"

  authCid <- submit alice do
    create Authorization with
      owner = alice
      approved = False

  -- Owners cannot send authorization requests that they approved themselves
  bad_auth <- submit alice do
    create Authorization with
      owner = alice
      approved = True

  submitMustFail alice do
    exercise bad_auth Send_Authorization

  -- Alice cannot accept her own proposal
  bad_proposal <- submit alice do
    auth <- fetch authCid
    create AuthorizationProposal with
      sender = alice
      receiver = alice
      authorization = auth

  submitMustFail alice do
    exercise bad_proposal UserAuthorization_Accept
    

  -- auth_proposal <- submit alice do
  --   create AuthorizationProposal with
  --     sender = alice
  --     receiver = bob
  --     authorization = auth

    

-- test_permissions = scenario do

--   alice <- getParty "Alice"
--   auth <- do
--     return True
  
--   -- let base = BasePermissions with authorization = auth
--   submit alice do
--     create Permissions with
--       owner = alice
--       permissions = auth